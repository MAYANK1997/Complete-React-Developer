import React, {Component} from 'react';
import logo from './logo.svg';
import './App.css';

class App extends React.Component{

  constructor(){
    super();
    this.state = {
      string:'Hello Mayank'           // introducing use of states
      
    };
  }

  render(){

    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>
            {this.state.string}
          </p>
          <button onClick={()=>this.setState({string:'Hello Mayank Pabbi'})}> Change Text </button> // setState method 
          <a
            className="App-link"
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
          >
            Learn React
          </a>
        </header>
      </div>
    );
  }
  
}

export default App;


Each component has several “lifecycle methods” that you can override to run code at particular times in the process. 
Mounting
These methods are called in the following order when an instance of a component is being created and inserted into the DOM:

constructor()
static getDerivedStateFromProps()
render()
componentDidMount()




The render() method is the only required method in a class component.

When called, it should examine this.props and this.state and return one of the following types:

React elements. Typically created via JSX. For example, <div /> and <MyComponent /> are React elements that instruct React to render a DOM node, or another user-defined component, respectively.
Arrays and fragments. Let you return multiple elements from render. See the documentation on fragments for more details.
Portals. Let you render children into a different DOM subtree. See the documentation on portals for more details.
String and numbers. These are rendered as text nodes in the DOM.
Booleans or null. Render nothing. (Mostly exists to support return test && <Child /> pattern, where test is boolean.)
The render() function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.

If you need to interact with the browser, perform your work in componentDidMount() or the other lifecycle methods instead. Keeping render() pure makes components easier to think about.


componentDidMount()
componentDidMount() is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.

This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().


import React from 'react';
import logo from './logo.svg';
import './App.css';
import { CardList } from './components/card-list/card-list.component';

class App extends React.Component{

  constructor(){
    super();
    this.state = {

      monsters : []
    };
  }

componentDidMount(){

fetch('https://jsonplaceholder.typicode.com/users')
.then(response => response.json())
.then(users => this.setState({monsters:users}));

}

  render(){

    return (
      <div className="App">
        <CardList name="A" />
        {this.state.monsters.map(monster => 
          (<h1 key={monster.id}> {monster.name} </h1>))}
          
      </div>

      
    );
  }
  
}

export default App;
import React from 'react';

export const CardList = props =>{
console.log(props);
return (

<div> Hello </div>

);


}



state vs props

ONE WAY DATA FLOW IN REACT 
So state to props 


